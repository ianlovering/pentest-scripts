#!/usr/bin/python

import sys
# change this to point at the location of nessrest
# remove if nessrest installed using pip
sys.path.append('../')

from nessrest.ness6rest import  *

import os
import atexit
import time
import requests
import json
import collections

class AdvScanner(Scanner):

    def __init__(self, url, login='', password='', api_akey='', api_skey='',
            insecure=False, ca_bundle='', cert=None):
        self.cert = cert
        super(AdvScanner, self).__init__( 
                url, 
                login=login, 
                password=password,
                api_akey=api_akey,
                api_skey=api_skey,
                insecure=insecure,
                ca_bundle=ca_bundle)

################################################################################
    def _login(self, login="", password=""):

        self.auth = [login,password]

        self.action(action="session",
                    method="post",
                    extra={"username": self.auth[0], "password": self.auth[1]},
                    private=True,
                    retry=False)

        try:
            self.token = self.res["token"]

        except KeyError:
            if self.res["error"]:
                print("It looks like you're trying to login into a Nessus 5")
                print("instance. Exiting.")
                sys.exit(0)

################################################################################
    def action(self, action, method, extra={}, files={}, json_req=True, download=False, private=False, retry=True):
        '''
        Generic actions for REST interface. The json_req may be unneeded, but
        the plugin searching functionality does not use a JSON-esque request.
        This is a backup setting to be able to change content types on the fly.
        '''
        payload = {}
        payload.update(extra)
        if self.use_api:
            headers = {'X-ApiKeys': 'accessKey=' + self.api_akey +
                       '; secretKey=' + self.api_skey}
        else:
            headers = {'X-Cookie': 'token=' + str(self.token)}

        if json_req:
            headers.update({'Content-type': 'application/json',
                            'Accept': 'text/plain'})
            payload = json.dumps(payload)

        url = "%s/%s" % (self.url, action)
        if self.debug:
            if private:
                print("JSON    : **JSON request hidden**")
            else:
                print("JSON    :")
                print(payload)

            print("HEADERS :")
            print(headers)
            print("URL     : %s " % url)
            print("METHOD  : %s" % method)
            print("\n")

        # Figure out if we should verify SSL connection (possibly with a user
        # supplied CA bundle). Default to true.
        if self.insecure:
            verify = False
        elif self.ca_bundle:
            verify = self.ca_bundle
        else:
            verify = True

        try:
            req = requests.request(method, url, data=payload, files=files,
                                   verify=verify, headers=headers, cert=self.cert)

            if not download and req.text:
                self.res = req.json()
            elif not req.text:
                self.res = {}

            if req.status_code != 200:
                print("*****************START ERROR*****************")
                if private:
                    print("JSON    : **JSON request hidden**")
                else:
                    print("JSON    :")
                    print(payload)
                    print(files)

                print("HEADERS :")
                print(headers)
                print("URL     : %s " % url)
                print("METHOD  : %s" % method)
                print("RESPONSE: %d" % req.status_code)
                print("\n")
                self.pretty_print()
                print("******************END ERROR******************")

            if self.debug:
                # This could also contain "pretty_print()" but it makes a lot of
                # noise if enabled for the entire scan.
                print("RESPONSE CODE: %d" % req.status_code)

            if download:
                return req.text
        except requests.exceptions.SSLError as ssl_error:
            raise SSLException('%s for %s.' % (ssl_error, url))
        except requests.exceptions.ConnectionError:
            raise Exception("Could not connect to %s.\nExiting!\n" % url)

        if self.res and "error" in self.res and retry:
            if self.res["error"] == "You need to log in to perform this request":
                self._login()
                self.action(action=action, method=method, extra=extra, files=files,
                            json_req=json_req, download=download, private=private,
                            retry=False)


################################################################################
    def policy_copy(self, existing_policy_name, new_policy_name):
        '''
        Create a copy of an existing policy and set it to be used for a scan
        '''
        self.action(action="policies", method="get")

        for policy in self.res["policies"]:
            if policy["name"] == existing_policy_name:
                self.action(action="policies/" + str(policy["id"]) + "/copy", method="post")
                self.policy_id = self.res["id"]

                '''
                If there is a name conflict the rename appends a
                number to the requested name.
                '''
                self.policy_name = new_policy_name
                self.action(action="policies/" + str(self.policy_id), method="put",
                        extra={"settings":{"name": self.policy_name}})
                return True

        return False

###############################################################################
    def policy_limit_ports(self, ports):
        '''
        Limit the ports scanned to the given list.
        '''
        extra = {"settings": {"portscan_range": str(ports)}}
        self.action(action="policies/" + str(self.policy_id), method="put",
            extra=extra)

