#!/usr/bin/python

import sys
import os
os.chdir(os.path.dirname(sys.argv[0]))

import myscanner
import time
import re
from datetime import datetime

import argparse

################################################################################
class ScannerFolders(object):

    def __init__(self, scanner):
        self.scanner = scanner
        self.folders = {}

        self.scanner.action(action="folders", method="get")

        for tag in scanner.res["folders"]:
            self.folders.update({tag["name"] : tag["id"]})

    def move_to(self, scan_id, folder_name):
        folder_id = self.get_id(folder_name)
        self.scanner.action(action="scans/" + str(scan_id) + "/folder", method="put",
            extra={"folder_id" : folder_id})

    def get_id(self, folder_name):
        if not folder_name in self.folders.keys():

            self.scanner.action(action="folders", method="get")

            for tag in self.scanner.res["folders"]:
                if tag["name"] == folder_name:
                    self.folders.update({tag["name"] : tag["id"]})

            if not folder_name in self.folders.keys():
                self.scanner.action("folders", method="post", extra={"name": folder_name})
                self.folders.update({folder_name : self.scanner.res["id"]})

        return self.folders[folder_name]

################################################################################

parser = argparse.ArgumentParser()
parser.add_argument("output_root", help="Root of output folder hierachy containing folders named by scan / IP address")
args = parser.parse_args()

testdata_folder = args.output_root

scanner = myscanner.get_scanner()
nessus_folders = ScannerFolders(scanner)
queue_folder_id = nessus_folders.get_id(myscanner.queue_folder)
run_folder_id = nessus_folders.get_id(myscanner.run_folder)

print("[%s] Monitoring Nessus...") % (datetime.now(),)
print("")

while True:
    scanner.action(action="scans?folder_id=" + str(queue_folder_id), method="get")

    if "scans" in scanner.res and scanner.res["scans"]:
        for scan in scanner.res["scans"]:
            print("[%s] Launching Scan %s...") % (datetime.now(),scan["name"])
            nessus_folders.move_to(scan["id"], myscanner.run_folder)
            scanner.action(
                    action="scans/" + str(scan["id"]) + "/launch",
                    method="post")
            print("...running")
            print("")


    scanner.action(action="scans?folder_id=" + str(run_folder_id), method="get")

    if "scans" in scanner.res and scanner.res["scans"]:
        for scan in scanner.res["scans"]:
            scanner.scan_name = scan["name"]
            scanner.scan_id = scan["id"]

            if scan["status"] == "completed":
                try:
                    print("[%s] Scan %s completed") % (datetime.now(),scanner.scan_name)
                    nessus_folder = scanner.scan_name.split(' (',1)[0]
                    os_folder = re.search('\((.*)\)', scanner.scan_name).group(1)

                    if nessus_folder in myscanner.auth_req:
                        scanner.action(action="scans/" + str(scanner.scan_id), method="get")
                        vulns = scanner.res['vulnerabilities']
                        if vulns:
                            for v in vulns:
                                if v['plugin_id'] == 21745:
                                    nessus_folder = myscanner.auth_fail_folder
                        else:
                            nessus_folder = myscanner.auth_fail_folder

                    print("Moving to %s") % (nessus_folder,)
                    nessus_folders.move_to(scanner.scan_id, nessus_folder)
                    print "Exporting nessus file..."

                    for root, dirnames, filenames in os.walk(testdata_folder):
                        for dirname in dirnames:
                            if dirname == os_folder:
                                xml_nessus = scanner.download_scan(export_format='nessus')
                                file_path = os.path.join(root,dirname,scanner.scan_name + ".nessus")
                                fp = open(file_path, "w")
                                fp.write(xml_nessus)
                                fp.close()
                                print("Exported to %s") % (file_path,)

                    print("")

                except Exception, e:
                    print e

    time.sleep(10)

